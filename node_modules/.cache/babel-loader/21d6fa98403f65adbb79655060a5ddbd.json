{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule randomizeBlockMapKeys\r\n * @format\r\n * \r\n */\n'use strict';\n\nvar ContentBlockNode = require('./ContentBlockNode');\n\nvar Immutable = require('immutable');\n\nvar generateRandomKey = require('./generateRandomKey');\n\nvar OrderedMap = Immutable.OrderedMap;\n\nvar randomizeContentBlockNodeKeys = function randomizeContentBlockNodeKeys(blockMap) {\n  var newKeysRef = {}; // we keep track of root blocks in order to update subsequent sibling links\n\n  var lastRootBlock = void 0;\n  return OrderedMap(blockMap.withMutations(function (blockMapState) {\n    blockMapState.forEach(function (block, index) {\n      var oldKey = block.getKey();\n      var nextKey = block.getNextSiblingKey();\n      var prevKey = block.getPrevSiblingKey();\n      var childrenKeys = block.getChildKeys();\n      var parentKey = block.getParentKey(); // new key that we will use to build linking\n\n      var key = generateRandomKey(); // we will add it here to re-use it later\n\n      newKeysRef[oldKey] = key;\n\n      if (nextKey) {\n        var nextBlock = blockMapState.get(nextKey);\n\n        if (nextBlock) {\n          blockMapState.setIn([nextKey, 'prevSibling'], key);\n        } else {\n          // this can happen when generating random keys for fragments\n          blockMapState.setIn([oldKey, 'nextSibling'], null);\n        }\n      }\n\n      if (prevKey) {\n        var prevBlock = blockMapState.get(prevKey);\n\n        if (prevBlock) {\n          blockMapState.setIn([prevKey, 'nextSibling'], key);\n        } else {\n          // this can happen when generating random keys for fragments\n          blockMapState.setIn([oldKey, 'prevSibling'], null);\n        }\n      }\n\n      if (parentKey && blockMapState.get(parentKey)) {\n        var parentBlock = blockMapState.get(parentKey);\n        var parentChildrenList = parentBlock.getChildKeys();\n        blockMapState.setIn([parentKey, 'children'], parentChildrenList.set(parentChildrenList.indexOf(block.getKey()), key));\n      } else {\n        // blocks will then be treated as root block nodes\n        blockMapState.setIn([oldKey, 'parent'], null);\n\n        if (lastRootBlock) {\n          blockMapState.setIn([lastRootBlock.getKey(), 'nextSibling'], key);\n          blockMapState.setIn([oldKey, 'prevSibling'], newKeysRef[lastRootBlock.getKey()]);\n        }\n\n        lastRootBlock = blockMapState.get(oldKey);\n      }\n\n      childrenKeys.forEach(function (childKey) {\n        var childBlock = blockMapState.get(childKey);\n\n        if (childBlock) {\n          blockMapState.setIn([childKey, 'parent'], key);\n        } else {\n          blockMapState.setIn([oldKey, 'children'], block.getChildKeys().filter(function (child) {\n            return child !== childKey;\n          }));\n        }\n      });\n    });\n  }).toArray().map(function (block) {\n    return [newKeysRef[block.getKey()], block.set('key', newKeysRef[block.getKey()])];\n  }));\n};\n\nvar randomizeContentBlockKeys = function randomizeContentBlockKeys(blockMap) {\n  return OrderedMap(blockMap.toArray().map(function (block) {\n    var key = generateRandomKey();\n    return [key, block.set('key', key)];\n  }));\n};\n\nvar randomizeBlockMapKeys = function randomizeBlockMapKeys(blockMap) {\n  var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\n\n  if (!isTreeBasedBlockMap) {\n    return randomizeContentBlockKeys(blockMap);\n  }\n\n  return randomizeContentBlockNodeKeys(blockMap);\n};\n\nmodule.exports = randomizeBlockMapKeys;","map":{"version":3,"names":["ContentBlockNode","require","Immutable","generateRandomKey","OrderedMap","randomizeContentBlockNodeKeys","blockMap","newKeysRef","lastRootBlock","withMutations","blockMapState","forEach","block","index","oldKey","getKey","nextKey","getNextSiblingKey","prevKey","getPrevSiblingKey","childrenKeys","getChildKeys","parentKey","getParentKey","key","nextBlock","get","setIn","prevBlock","parentBlock","parentChildrenList","set","indexOf","childKey","childBlock","filter","child","toArray","map","randomizeContentBlockKeys","randomizeBlockMapKeys","isTreeBasedBlockMap","first","module","exports"],"sources":["C:/20220103_lab/15.final_project/Front/homemaker-FE/node_modules/draft-js/lib/randomizeBlockMapKeys.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule randomizeBlockMapKeys\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar ContentBlockNode = require('./ContentBlockNode');\r\nvar Immutable = require('immutable');\r\n\r\nvar generateRandomKey = require('./generateRandomKey');\r\n\r\nvar OrderedMap = Immutable.OrderedMap;\r\n\r\n\r\nvar randomizeContentBlockNodeKeys = function randomizeContentBlockNodeKeys(blockMap) {\r\n  var newKeysRef = {};\r\n\r\n  // we keep track of root blocks in order to update subsequent sibling links\r\n  var lastRootBlock = void 0;\r\n\r\n  return OrderedMap(blockMap.withMutations(function (blockMapState) {\r\n    blockMapState.forEach(function (block, index) {\r\n      var oldKey = block.getKey();\r\n      var nextKey = block.getNextSiblingKey();\r\n      var prevKey = block.getPrevSiblingKey();\r\n      var childrenKeys = block.getChildKeys();\r\n      var parentKey = block.getParentKey();\r\n\r\n      // new key that we will use to build linking\r\n      var key = generateRandomKey();\r\n\r\n      // we will add it here to re-use it later\r\n      newKeysRef[oldKey] = key;\r\n\r\n      if (nextKey) {\r\n        var nextBlock = blockMapState.get(nextKey);\r\n        if (nextBlock) {\r\n          blockMapState.setIn([nextKey, 'prevSibling'], key);\r\n        } else {\r\n          // this can happen when generating random keys for fragments\r\n          blockMapState.setIn([oldKey, 'nextSibling'], null);\r\n        }\r\n      }\r\n\r\n      if (prevKey) {\r\n        var prevBlock = blockMapState.get(prevKey);\r\n        if (prevBlock) {\r\n          blockMapState.setIn([prevKey, 'nextSibling'], key);\r\n        } else {\r\n          // this can happen when generating random keys for fragments\r\n          blockMapState.setIn([oldKey, 'prevSibling'], null);\r\n        }\r\n      }\r\n\r\n      if (parentKey && blockMapState.get(parentKey)) {\r\n        var parentBlock = blockMapState.get(parentKey);\r\n        var parentChildrenList = parentBlock.getChildKeys();\r\n        blockMapState.setIn([parentKey, 'children'], parentChildrenList.set(parentChildrenList.indexOf(block.getKey()), key));\r\n      } else {\r\n        // blocks will then be treated as root block nodes\r\n        blockMapState.setIn([oldKey, 'parent'], null);\r\n\r\n        if (lastRootBlock) {\r\n          blockMapState.setIn([lastRootBlock.getKey(), 'nextSibling'], key);\r\n          blockMapState.setIn([oldKey, 'prevSibling'], newKeysRef[lastRootBlock.getKey()]);\r\n        }\r\n\r\n        lastRootBlock = blockMapState.get(oldKey);\r\n      }\r\n\r\n      childrenKeys.forEach(function (childKey) {\r\n        var childBlock = blockMapState.get(childKey);\r\n        if (childBlock) {\r\n          blockMapState.setIn([childKey, 'parent'], key);\r\n        } else {\r\n          blockMapState.setIn([oldKey, 'children'], block.getChildKeys().filter(function (child) {\r\n            return child !== childKey;\r\n          }));\r\n        }\r\n      });\r\n    });\r\n  }).toArray().map(function (block) {\r\n    return [newKeysRef[block.getKey()], block.set('key', newKeysRef[block.getKey()])];\r\n  }));\r\n};\r\n\r\nvar randomizeContentBlockKeys = function randomizeContentBlockKeys(blockMap) {\r\n  return OrderedMap(blockMap.toArray().map(function (block) {\r\n    var key = generateRandomKey();\r\n    return [key, block.set('key', key)];\r\n  }));\r\n};\r\n\r\nvar randomizeBlockMapKeys = function randomizeBlockMapKeys(blockMap) {\r\n  var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\r\n\r\n  if (!isTreeBasedBlockMap) {\r\n    return randomizeContentBlockKeys(blockMap);\r\n  }\r\n\r\n  return randomizeContentBlockNodeKeys(blockMap);\r\n};\r\n\r\nmodule.exports = randomizeBlockMapKeys;"],"mappings":"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"},"metadata":{},"sourceType":"script"}