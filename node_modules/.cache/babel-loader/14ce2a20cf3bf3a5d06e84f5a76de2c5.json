{"ast":null,"code":"var _jsxFileName = \"C:\\\\jihyun\\\\final\\\\src\\\\Cart\\\\Checkout.js\";\nimport React from 'react';\nimport './Checkout.css';\nimport photo1 from './amazonad.jpeg';\nimport Subtotal from './Subtotal';\nimport CheckoutProduct from './CheckoutProduct';\n\nfunction Checkout() {\n  /*const[{basket}, {dispatch}] = useStateValue();\r\n  \r\n  나중에 밑줄로 이동해야함\r\n  {basket.map(item => (\r\n                      <CheckoutProduct id={item.id} title={item.title} image={item.image}\r\n                      price={item.price} rating={item.rating} />\r\n                  ))}\r\n  */\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"checkout_ad\",\n    src: photo1,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"checkout_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, \"\\uC7A5\\uBC14\\uAD6C\\uB2C8\"), /*#__PURE__*/React.createElement(CheckoutProduct, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CheckoutProduct, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CheckoutProduct, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkout_right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Subtotal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Checkout; // import React, { useState } from 'react'\n// import CartContext from './CartContext'\n// const CartProvider = (props) => {\n//     const [cartState, setCartState] =useState({\n//     // items: [{id: 'book1', name: 'THE OLD MAN AND SEA', price: 15.23, amount: 5}],\n//     // totalAmount: 76.15\n//         items: [],\n//         totalAmount: 0\n//     });\n//     // cart에 book 데이터를 추가하는 메서드\n//     const addItemToCartHandler = (item) => {\n//         // console.log('addItemToCartHandler called!');\n//         console.log(item);\n//         // 1. 기본으로 add할 경우,\n//         // 기존에 cart에 등록된 items에 방금 새로 전달된 item 추가.\n//         // const updatedItem = [\n//         //     ...cartState.items,\n//         //     item\n//         // ]\n//         // setCartState({items: updatedItem});\n//         // 2.Add를 1개씩 여러번 추가하였을 떄 cart에 각각 listing 되지 않고, 중복된 수량으로 통합 연산되도록\n//         // 이미 동일한 id값의 book이 cart에 존재 할 경우,\n//         // 해당 book의 amount만 추가.\n//         const existingCartItemIndex = cartState.items.findIndex(\n//             (cartItem) => cartItem.id === item.id\n//         );\n//         const existingCartItem = cartState.items[existingCartItemIndex]\n//         let updatedItems;\n//         if (existingCartItem) { // 방금 새로 등록한 book(item)이 cart에 이미 존재할 때.\n//             const updatedItem = {\n//                 ...existingCartItem,\n//                 amount: existingCartItem.amount + item.amount,\n//             };\n//             updatedItems = [...cartState.items];\n//             updatedItems[existingCartItemIndex] = updatedItem;\n//         }else { //방금 새로 등록한 book(item)이 cart에 존재하지 않을 때.}\n//             updatedItems = cartState.items.concat(item);\n//         }\n//         const updatedTotalAmount = cartState.totalAmount + item.price * item.amount;\n//         setCartState({items:updatedItems, totalAmount: updatedTotalAmount})\n//     };\n//     const cartContext = {\n//         items: cartState.items,\n//         totalAmount : cartState.totalAmount,\n//         addItem: addItemToCartHandler,\n//     }\n//   return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>;\n// }\n// export default CartProvider","map":{"version":3,"names":["React","photo1","Subtotal","CheckoutProduct","Checkout"],"sources":["C:/jihyun/final/src/Cart/Checkout.js"],"sourcesContent":["import React from 'react';\r\nimport './Checkout.css'\r\nimport photo1 from './amazonad.jpeg'\r\nimport Subtotal from './Subtotal'\r\nimport CheckoutProduct from './CheckoutProduct';\r\n\r\nfunction Checkout() {\r\n\r\n    /*const[{basket}, {dispatch}] = useStateValue();\r\n    \r\n    나중에 밑줄로 이동해야함\r\n    {basket.map(item => (\r\n                        <CheckoutProduct id={item.id} title={item.title} image={item.image}\r\n                        price={item.price} rating={item.rating} />\r\n                    ))}\r\n    */\r\n\r\n    return (\r\n        <div className=\"checkout\"> \r\n            <div className='checkout-left'>\r\n\r\n                <img className=\"checkout_ad\"\r\n                    src={photo1}\r\n                    alt=\"\" />\r\n\r\n                <div>\r\n                    <h2 className=\"checkout_title\">\r\n                        장바구니\r\n                    </h2>\r\n                    \r\n                    \r\n                    \r\n                    <CheckoutProduct/>\r\n                    <CheckoutProduct/>\r\n                    <CheckoutProduct/>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            <div className='checkout_right'>\r\n                <Subtotal />\r\n            </div>\r\n        </div>\r\n);\r\n}\r\n\r\nexport default Checkout;\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import CartContext from './CartContext'\r\n\r\n// const CartProvider = (props) => {\r\n    \r\n//     const [cartState, setCartState] =useState({\r\n//     // items: [{id: 'book1', name: 'THE OLD MAN AND SEA', price: 15.23, amount: 5}],\r\n//     // totalAmount: 76.15\r\n//         items: [],\r\n//         totalAmount: 0\r\n//     });\r\n\r\n//     // cart에 book 데이터를 추가하는 메서드\r\n//     const addItemToCartHandler = (item) => {\r\n//         // console.log('addItemToCartHandler called!');\r\n//         console.log(item);\r\n\r\n//         // 1. 기본으로 add할 경우,\r\n//         // 기존에 cart에 등록된 items에 방금 새로 전달된 item 추가.\r\n//         // const updatedItem = [\r\n//         //     ...cartState.items,\r\n//         //     item\r\n//         // ]\r\n\r\n//         // setCartState({items: updatedItem});\r\n\r\n//         // 2.Add를 1개씩 여러번 추가하였을 떄 cart에 각각 listing 되지 않고, 중복된 수량으로 통합 연산되도록\r\n//         // 이미 동일한 id값의 book이 cart에 존재 할 경우,\r\n//         // 해당 book의 amount만 추가.\r\n\r\n//         const existingCartItemIndex = cartState.items.findIndex(\r\n//             (cartItem) => cartItem.id === item.id\r\n//         );\r\n\r\n//         const existingCartItem = cartState.items[existingCartItemIndex]\r\n\r\n//         let updatedItems;\r\n//         if (existingCartItem) { // 방금 새로 등록한 book(item)이 cart에 이미 존재할 때.\r\n//             const updatedItem = {\r\n//                 ...existingCartItem,\r\n//                 amount: existingCartItem.amount + item.amount,\r\n//             };\r\n//             updatedItems = [...cartState.items];\r\n//             updatedItems[existingCartItemIndex] = updatedItem;\r\n\r\n//         }else { //방금 새로 등록한 book(item)이 cart에 존재하지 않을 때.}\r\n//             updatedItems = cartState.items.concat(item);\r\n//         }\r\n\r\n//         const updatedTotalAmount = cartState.totalAmount + item.price * item.amount;\r\n//         setCartState({items:updatedItems, totalAmount: updatedTotalAmount})\r\n//     };\r\n\r\n//     const cartContext = {\r\n//         items: cartState.items,\r\n//         totalAmount : cartState.totalAmount,\r\n//         addItem: addItemToCartHandler,\r\n//     }\r\n\r\n//   return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>;\r\n// }\r\n\r\n// export default CartProvider"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,QAAT,GAAoB;EAEhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,oBACI;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAK,SAAS,EAAC,eAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEI;IAAK,SAAS,EAAC,aAAf;IACI,GAAG,EAAEH,MADT;IAEI,GAAG,EAAC,EAFR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAMI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAI,SAAS,EAAC,gBAAd;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8BADJ,eAOI,oBAAC,eAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAPJ,eAQI,oBAAC,eAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EARJ,eASI,oBAAC,eAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EATJ,CANJ,CADJ,eAsBI;IAAK,SAAS,EAAC,gBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,QAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CAtBJ,CADJ;AA4BH;;AAED,eAAeG,QAAf,C,CAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA"},"metadata":{},"sourceType":"module"}