{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { isLabelInValue } from './util';\nvar internalValProp = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\nexport function genArrProps(propType) {\n  return PropTypes.oneOfType([propType, PropTypes.arrayOf(propType)]);\n}\n/**\r\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\r\n * But in process logic is already cover to array.\r\n * Check array is not necessary. Let's simplify this check logic.\r\n */\n\nexport function valueProp() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var props = args[0],\n      propName = args[1],\n      Component = args[2];\n\n  if (isLabelInValue(props)) {\n    var _err = genArrProps(PropTypes.shape({\n      label: PropTypes.node,\n      value: internalValProp\n    })).apply(void 0, args);\n\n    if (_err) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\");\n    }\n\n    return null;\n  }\n\n  var err = genArrProps(internalValProp).apply(void 0, args);\n\n  if (err) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use string or [string] instead.\");\n  }\n\n  return null;\n}","map":{"version":3,"names":["PropTypes","isLabelInValue","internalValProp","oneOfType","string","number","genArrProps","propType","arrayOf","valueProp","_len","arguments","length","args","Array","_key","props","propName","Component","_err","shape","label","node","value","apply","Error","concat","err"],"sources":["C:/20220103_lab/15.final_project/Front/homemaker-FE/node_modules/rc-tree-select/es/propTypes.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { isLabelInValue } from './util';\r\nvar internalValProp = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\r\nexport function genArrProps(propType) {\r\n  return PropTypes.oneOfType([propType, PropTypes.arrayOf(propType)]);\r\n}\r\n/**\r\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\r\n * But in process logic is already cover to array.\r\n * Check array is not necessary. Let's simplify this check logic.\r\n */\r\n\r\nexport function valueProp() {\r\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    args[_key] = arguments[_key];\r\n  }\r\n\r\n  var props = args[0],\r\n      propName = args[1],\r\n      Component = args[2];\r\n\r\n  if (isLabelInValue(props)) {\r\n    var _err = genArrProps(PropTypes.shape({\r\n      label: PropTypes.node,\r\n      value: internalValProp\r\n    })).apply(void 0, args);\r\n\r\n    if (_err) {\r\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\");\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  var err = genArrProps(internalValProp).apply(void 0, args);\r\n\r\n  if (err) {\r\n    return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use string or [string] instead.\");\r\n  }\r\n\r\n  return null;\r\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,IAAIC,eAAe,GAAGF,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACI,MAAX,EAAmBJ,SAAS,CAACK,MAA7B,CAApB,CAAtB;AACA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+B;EACpC,OAAOP,SAAS,CAACG,SAAV,CAAoB,CAACI,QAAD,EAAWP,SAAS,CAACQ,OAAV,CAAkBD,QAAlB,CAAX,CAApB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,SAAT,GAAqB;EAC1B,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;IACvFF,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;EACD;;EAED,IAAIC,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAhB;EAAA,IACII,QAAQ,GAAGJ,IAAI,CAAC,CAAD,CADnB;EAAA,IAEIK,SAAS,GAAGL,IAAI,CAAC,CAAD,CAFpB;;EAIA,IAAIZ,cAAc,CAACe,KAAD,CAAlB,EAA2B;IACzB,IAAIG,IAAI,GAAGb,WAAW,CAACN,SAAS,CAACoB,KAAV,CAAgB;MACrCC,KAAK,EAAErB,SAAS,CAACsB,IADoB;MAErCC,KAAK,EAAErB;IAF8B,CAAhB,CAAD,CAAX,CAGPsB,KAHO,CAGD,KAAK,CAHJ,EAGOX,IAHP,CAAX;;IAKA,IAAIM,IAAJ,EAAU;MACR,OAAO,IAAIM,KAAJ,CAAU,iBAAiBC,MAAjB,CAAwBT,QAAxB,EAAkC,iBAAlC,EAAqDS,MAArD,CAA4DR,SAA5D,EAAuE,KAAvE,IAAgF,kHAA1F,CAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAED,IAAIS,GAAG,GAAGrB,WAAW,CAACJ,eAAD,CAAX,CAA6BsB,KAA7B,CAAmC,KAAK,CAAxC,EAA2CX,IAA3C,CAAV;;EAEA,IAAIc,GAAJ,EAAS;IACP,OAAO,IAAIF,KAAJ,CAAU,iBAAiBC,MAAjB,CAAwBT,QAAxB,EAAkC,iBAAlC,EAAqDS,MAArD,CAA4DR,SAA5D,EAAuE,KAAvE,IAAgF,4CAA1F,CAAP;EACD;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}